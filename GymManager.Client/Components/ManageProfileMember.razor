@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using GymManager.Client.Services
@using GymManager.Shared.DTOs.Member
@using GymManager.Shared.DTOs.Admin
@using GymManager.Shared.DTOs.Auth
@using CreateTrainerAssignmentDto = GymManager.Shared.DTOs.Member.CreateTrainerAssignmentDto
@inject MemberService MemberService
@inject TrainerAssignmentService TrainerAssignmentService
@inject TrainerService TrainerService
@inject MembershipService MembershipService
@inject AuthService AuthService
@inject IJSRuntime JS

<div class="card shadow-sm p-4">
    <h3 class="mb-4 text-danger">Manage Your Profile</h3>

    <h5 class="text-secondary">Update personal data</h5>
    <EditForm Model="@_updateDto" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label for="firstNameInput" class="form-label">First Name</label>
            <input id="firstNameInput" class="form-control" placeholder="First Name" @bind="_updateDto.FirstName" />
            <ValidationMessage class="text-danger" For="@(() => _updateDto.FirstName)" />
        </div>

        <div class="mb-2">
            <label for="lastNameInput" class="form-label">Last Name</label>
            <input id="lastNameInput" class="form-control" placeholder="Last Name" @bind="_updateDto.LastName" />
            <ValidationMessage class="text-danger" For="@(() => _updateDto.LastName)" />
        </div>

        <div class="mb-2">
            <label for="dobInput" class="form-label">Date of Birth</label>
            <input id="dobInput" type="date" class="form-control" @bind="_updateDto.DateOfBirth" />
            <ValidationMessage class="text-danger" For="@(() => _updateDto.DateOfBirth)" />
        </div>

        <div class="mb-2">
            <label for="phoneInput" class="form-label">Phone Number</label>
            <input id="phoneInput" class="form-control" placeholder="Phone Number" @bind="_updateDto.PhoneNumber" />
            <ValidationMessage class="text-danger" For="@(() => _updateDto.PhoneNumber)" />
        </div>

        <button class="btn btn-danger" type="submit">Save</button>
    </EditForm>

    <hr class="my-4" />
    <h5 class="text-secondary">Change Password</h5>

    <EditForm Model="_changePasswordDto" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator />
        
        <div class="mb-2">
            <label for="currentPassword" class="form-label">Current Password</label>
            <input id="currentPassword" type="password" class="form-control" @bind="_changePasswordDto.CurrentPassword" />
            <ValidationMessage class="text-danger" For="@(() => _changePasswordDto.CurrentPassword)" />
        </div>

        <div class="mb-2">
            <label for="newPassword" class="form-label">New Password</label>
            <input id="newPassword" type="password" class="form-control" @bind="_changePasswordDto.NewPassword" />
            <ValidationMessage class="text-danger" For="@(() => _changePasswordDto.NewPassword)" />
        </div>

        <div class="mb-2">
            <label for="confirmPassword" class="form-label">Confirm New Password</label>
            <input id="confirmPassword" type="password" class="form-control" @bind="_changePasswordDto.ConfirmPassword" />
            <ValidationMessage class="text-danger" For="@(() => _changePasswordDto.ConfirmPassword)" />
        </div> 

        @if (_passwordChangeMessage is not null)
        {
            <div class="alert @( _passwordChangeSuccess ? "alert-success" : "alert-danger" )">
                @_passwordChangeMessage
            </div>
        }

        <button class="btn btn-danger" type="submit">Change Password</button>
    </EditForm>


    <hr class="my-4" />

    <h5 class="text-secondary">Membership</h5>
    @if (_memberMembership == null)
    {
        <div class="bg-light p-3 rounded border mt-2">
            <p class="text-muted">No active membership.</p>
            <button class="btn btn-sm btn-outline-primary" href="/offers">Get Membership</button>
        </div>
    }
    else
    {
        <div class="m-3 mb-4">
                <p>Membership Type: <strong>@_memberMembership.TypeName</strong></p>
                <p>Status: <strong class="text-success">
                        @(_memberMembership.EndDate >= DateTime.Now ? "Active" : "Expired")
                    </strong></p>
                <p>Start: @_memberMembership.StartDate.ToString("dd.MM.yyyy HH:mm")</p>
                <p>End: @_memberMembership.EndDate?.ToString("dd.MM.yyyy HH:mm")</p>

            <p class="text-muted">To change membership, please contact the admin.</p>
        </div>
        
        <h5 class="text-secondary">Trainer Assignment</h5>
        @if (_memberTrainerAssignemnt == null)
        {
            <div class="bg-light p-3 rounded border mt-2">
                <p class="text-muted">No trainer assigned.</p>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => _showAssignmentForm = true">Assign Trainer</button>
            </div>

            @if (_showAssignmentForm)
            {
                <p class="text-muted p-2">Choose wisely <strong><a href="/trainers">trainer</a></strong>, if you would like to change - contact admin</p>
                <EditForm Model="@_newAssignment" OnValidSubmit="AssignTrainer">
                    <DataAnnotationsValidator />
                    <div class="mb-3 mt-3">
                        <label class="form-label">Trainer</label>
                        <select class="form-select w-50" @bind="_newAssignment.TrainerId">
                            <option value="" selected disabled>-- Select Trainer --</option>
                            @foreach (var trainer in _trainers)
                            {
                                <option value="@trainer.Id">@trainer.FirstName @trainer.LastName</option>
                            }
                        </select>
                        <ValidationMessage class="text-danger" For="@(() => _newAssignment.TrainerId)" />
                    </div>
                    <button class="btn btn-danger" type="submit">Choose trainer!</button>
                </EditForm>
            }
        }
        else
        {
            <div class="m-3 mb-4">
                <p>Assigned Trainer: <strong>@_memberTrainerAssignemnt.TrainerFirstName @_memberTrainerAssignemnt.TrainerSecondName</strong></p>
                <p>Status: <strong class="text-success">@(_memberTrainerAssignemnt.IsActive ? "Active" : "Inactive")</strong></p>
                <p class="text-muted">To change trainer, please contact the admin.</p>
            </div>
        }
    }
</div>

@code {
    private ReadSelfMemberDto _member = new();
    private UpdateSelfMemberDto _updateDto = new();
    private ReadSelfTrainerAssignmentDto? _memberTrainerAssignemnt;
    private Shared.DTOs.Member.CreateTrainerAssignmentDto _newAssignment = new();
    private List<Shared.DTOs.Member.ReadTrainerDto> _trainers = new();
    private bool _showAssignmentForm = false;
    private ReadSelfMembershipDto? _memberMembership = new();
    private DateTime _selectedDate = DateTime.Today;
    private int? _selectedHour = null;
    private string? _trainingError = null;
    private int _durationInMinutes = 60; 
    private ChangePasswordDto _changePasswordDto = new();
    private string? _passwordChangeMessage;
    private bool _passwordChangeSuccess;
    
    protected override async Task OnInitializedAsync()
    {
        _member = await MemberService.GetSelfAsync() ?? new();
        _updateDto = new UpdateSelfMemberDto
        {
            FirstName = _member.FirstName,
            LastName = _member.LastName,
            DateOfBirth = _member.DateOfBirth,
            PhoneNumber = _member.PhoneNumber,
        };

        _memberMembership = await TryGet(() => MembershipService.GetOwnAsync());
        _memberTrainerAssignemnt = await TryGet(() => TrainerAssignmentService.GetMemberSelfAsync());
        _trainers = await TrainerService.GetAllMemberAsync() ?? new();
    }

    private async Task<T?> TryGet<T>(Func<Task<T>> action)
    {
        try { return await action(); } catch { return default; }
    }

    private async Task UpdateProfile()
    {
        await MemberService.UpdateSelfAsync(_updateDto);
        _member = await MemberService.GetSelfAsync() ?? new();
    }

    private async Task AssignTrainer()
    {
        Console.WriteLine("AssignTrainer called!");
        await TrainerAssignmentService.CreateSelfAsync(_newAssignment);
        _memberTrainerAssignemnt = await TryGet(() => TrainerAssignmentService.GetMemberSelfAsync());
        _showAssignmentForm = false;
        StateHasChanged();
    }
    
    
    private async Task ChangePassword()
    {
        _passwordChangeMessage = null;

        try
        {
            Console.WriteLine(JsonSerializer.Serialize(_changePasswordDto));
            var result = await AuthService.ChangePasswordAsync(
                _changePasswordDto.CurrentPassword,
                _changePasswordDto.NewPassword);

            if (result)
            {
                _passwordChangeSuccess = true;
                _passwordChangeMessage = "Password changed successfully.";
                _changePasswordDto = new(); 
            }
            else
            {
                _passwordChangeSuccess = false;
                _passwordChangeMessage = "Failed to change password. Please check your current password.";
            }
        }
        catch (Exception ex)
        {
            _passwordChangeSuccess = false;
            _passwordChangeMessage = ex.Message;
        }
    }


}
